Part 13: Letting Admins Add Faculty for Content Sharing
What We’re Doing
Let’s let admins invite new faculty to share content, like adding authors to our library! This is a core CM feature, enabling faculty (like “Faculty C, CSE”) to upload files for students. We’ll add an “Add Faculty” button to the dashboard from Part 12, using UA’s existing faculty creation to set up CM permissions (e.g., allow uploads for “CSE”). It’s about growing CM’s content creators, not rebuilding UA’s user setup. A bouncy user icon will feel welcoming!
What We Need 
•	Add an “Add Faculty” button and form (email, faculty ID, department) to the admin dashboard. 
•	A CM-specific /add-faculty-content endpoint that uses UA’s /add-faculty to grant upload permissions in CM’s “content” table (links to dept_id). 
•	Log additions in UA’s “audit_log” (e.g., “Admin added Faculty C for content”). 
•	A “bounce” animation for the button and a FontAwesome user-plus icon.
Who Can Do What 
•	Students: 
o	Can: Watch/download files. 
o	Can’t: Add faculty or see the dashboard. 
o	Understands: “New teachers mean more files for you!”
•	Faculty: 
o	Can: Upload, edit, delete files, see analytics, use tags. 
o	Can’t: Add other faculty or use admin tools. 
o	Understands: “More colleagues will share great content!”
•	Admins: 
o	Can: Sync/remove students (Parts 11–12), add faculty to share content. 
o	Can’t: Upload content directly—that’s for faculty. 
o	Understands: “Add teachers to fill the library!”
Tools Needed 
•	Frontend: React.js (Next.js) for the dashboard, TailwindCSS for styling, Animate.css for “bounce” effect, FontAwesome for a user-plus icon (fa-user-plus). 
•	Backend: FastAPI for /add-faculty-content, SQLite for permissions. 
•	Database: SQLite for CM’s “content” table, uses UA’s “users” and “audit_log”. 
•	Storage: None—just setting up access. 
•	AI Tools: None—just faculty addition. 
•	Tech Stack Rule: Use only these tools. Any changes need my approval first.
Strict Mandate for Replit AI
Dear Replit AI, you must always use real, fully functional implementations for all tools, technologies, frameworks, and APIs, including AI, ML, DL, DS, CV, and others. Simulated, mocked, fake, placeholder, hardcoded, or dummy responses are strictly forbidden. All computations, data processing, and API calls must be genuine, executed in real-time with actual systems, producing verifiable results. This rule is absolute and enforced for every operation, with no exceptions.
Think Step by Step 
1.	Design the “Add Faculty” form and button on the dashboard. 
2.	Plan the /add-faculty-content endpoint to use UA’s /add-faculty for CM uploads. 
3.	Ensure “audit_log” tracks additions for clarity. 
4.	Choose “bounce” animation and user-plus icon for a friendly UX. 
5.	Ensure high-end CSS, alignment, colors, icons, and spacing—delightful for all users, even kids.
UX Mandate
All pages must have proper styling, alignment, structure, high-end animations (used sparingly, only where needed), good colors, and FontAwesome icons. The UX should delight users, and even a child should understand it.
Why It’s Cool
The bouncy button makes growing the content team fun, bringing more files to Flipped Patashala’s library!

1.	let us start part <13> . of CONTENT MANAGEMENT MODULE first prepare a plan which is single unified plan without subplans so your  plan should contain all those functionalities and all tools Technologies mentioned for that part. 
2.	first provide a plan as mentioned and ask for approval before starting the implementation of that part
3.	 implementation plan should contain REAL front end, back end , database, AI  tools simultaneously. 
4.	If u change any technology tool api framework etc in the plan mention the reason for change clearly and tool  and  must take my approval before implementation 
5.	avoid redoing of work always check what has be done so far 
6.	avoid mentioning of any timelines or durations in the plan.
7.	Use a table to show which tool has been used and any replacement mention  it with reason
8.	avoid redoing of work always check what has be done so far

